
DemoBoard.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  00000118  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000030  00000000  00000000  00000148  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000001ad  00000000  00000000  00000178  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000113  00000000  00000000  00000325  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000324  00000000  00000000  00000438  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000044  00000000  00000000  0000075c  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000064bd  00000000  00000000  000007a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000012c  00000000  00000000  00006c5d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000020  00000000  00000000  00006d89  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_macro  00000226  00000000  00000000  00006da9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	2b c0       	rjmp	.+86     	; 0x58 <__ctors_end>
   2:	00 00       	nop
   4:	31 c0       	rjmp	.+98     	; 0x68 <__bad_interrupt>
   6:	00 00       	nop
   8:	2f c0       	rjmp	.+94     	; 0x68 <__bad_interrupt>
   a:	00 00       	nop
   c:	2d c0       	rjmp	.+90     	; 0x68 <__bad_interrupt>
   e:	00 00       	nop
  10:	2b c0       	rjmp	.+86     	; 0x68 <__bad_interrupt>
  12:	00 00       	nop
  14:	29 c0       	rjmp	.+82     	; 0x68 <__bad_interrupt>
  16:	00 00       	nop
  18:	27 c0       	rjmp	.+78     	; 0x68 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	25 c0       	rjmp	.+74     	; 0x68 <__bad_interrupt>
  1e:	00 00       	nop
  20:	23 c0       	rjmp	.+70     	; 0x68 <__bad_interrupt>
  22:	00 00       	nop
  24:	21 c0       	rjmp	.+66     	; 0x68 <__bad_interrupt>
  26:	00 00       	nop
  28:	1f c0       	rjmp	.+62     	; 0x68 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	1d c0       	rjmp	.+58     	; 0x68 <__bad_interrupt>
  2e:	00 00       	nop
  30:	1b c0       	rjmp	.+54     	; 0x68 <__bad_interrupt>
  32:	00 00       	nop
  34:	19 c0       	rjmp	.+50     	; 0x68 <__bad_interrupt>
  36:	00 00       	nop
  38:	17 c0       	rjmp	.+46     	; 0x68 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	15 c0       	rjmp	.+42     	; 0x68 <__bad_interrupt>
  3e:	00 00       	nop
  40:	13 c0       	rjmp	.+38     	; 0x68 <__bad_interrupt>
  42:	00 00       	nop
  44:	11 c0       	rjmp	.+34     	; 0x68 <__bad_interrupt>
  46:	00 00       	nop
  48:	0f c0       	rjmp	.+30     	; 0x68 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	0d c0       	rjmp	.+26     	; 0x68 <__bad_interrupt>
  4e:	00 00       	nop
  50:	0b c0       	rjmp	.+22     	; 0x68 <__bad_interrupt>
  52:	00 00       	nop
  54:	09 c0       	rjmp	.+18     	; 0x68 <__bad_interrupt>
	...

00000058 <__ctors_end>:
  58:	11 24       	eor	r1, r1
  5a:	1f be       	out	0x3f, r1	; 63
  5c:	cf ef       	ldi	r28, 0xFF	; 255
  5e:	d4 e0       	ldi	r29, 0x04	; 4
  60:	de bf       	out	0x3e, r29	; 62
  62:	cd bf       	out	0x3d, r28	; 61
  64:	2c d0       	rcall	.+88     	; 0xbe <main>
  66:	2c c0       	rjmp	.+88     	; 0xc0 <_exit>

00000068 <__bad_interrupt>:
  68:	cb cf       	rjmp	.-106    	; 0x0 <__vectors>

0000006a <sweep>:
}

// sweep the LEDs back and forth
void sweep() {
	// change direction of pins with DDRC
	DDRC = 0xFF;
  6a:	8f ef       	ldi	r24, 0xFF	; 255
  6c:	87 b9       	out	0x07, r24	; 7
	
	PORTC = 0x01;
  6e:	81 e0       	ldi	r24, 0x01	; 1
  70:	88 b9       	out	0x08, r24	; 8
	// change levels with PORTx
	while(1) {
		for (int i = 0; i < 7; ++i) {
  72:	80 e0       	ldi	r24, 0x00	; 0
  74:	90 e0       	ldi	r25, 0x00	; 0
  76:	47 e0       	ldi	r20, 0x07	; 7
  78:	30 e0       	ldi	r19, 0x00	; 0
  7a:	60 e0       	ldi	r22, 0x00	; 0
  7c:	50 e0       	ldi	r21, 0x00	; 0
  7e:	0d c0       	rjmp	.+26     	; 0x9a <sweep+0x30>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  80:	e7 ea       	ldi	r30, 0xA7	; 167
  82:	f1 e6       	ldi	r31, 0x61	; 97
  84:	31 97       	sbiw	r30, 0x01	; 1
  86:	f1 f7       	brne	.-4      	; 0x84 <sweep+0x1a>
  88:	00 c0       	rjmp	.+0      	; 0x8a <sweep+0x20>
  8a:	00 00       	nop
			_delay_ms(100);
			PORTC = PORTC << 1;
  8c:	28 b1       	in	r18, 0x08	; 8
  8e:	22 0f       	add	r18, r18
  90:	28 b9       	out	0x08, r18	; 8
	DDRC = 0xFF;
	
	PORTC = 0x01;
	// change levels with PORTx
	while(1) {
		for (int i = 0; i < 7; ++i) {
  92:	01 96       	adiw	r24, 0x01	; 1
  94:	02 c0       	rjmp	.+4      	; 0x9a <sweep+0x30>
  96:	86 2f       	mov	r24, r22
  98:	95 2f       	mov	r25, r21
  9a:	87 30       	cpi	r24, 0x07	; 7
  9c:	91 05       	cpc	r25, r1
  9e:	84 f3       	brlt	.-32     	; 0x80 <sweep+0x16>
  a0:	84 2f       	mov	r24, r20
  a2:	93 2f       	mov	r25, r19
  a4:	e7 ea       	ldi	r30, 0xA7	; 167
  a6:	f1 e6       	ldi	r31, 0x61	; 97
  a8:	31 97       	sbiw	r30, 0x01	; 1
  aa:	f1 f7       	brne	.-4      	; 0xa8 <sweep+0x3e>
  ac:	00 c0       	rjmp	.+0      	; 0xae <sweep+0x44>
  ae:	00 00       	nop
			_delay_ms(100);
			PORTC = PORTC << 1;
		}
		for (int i = 0; i < 7; ++i) {
			_delay_ms(100);
			PORTC = PORTC >> 1;
  b0:	28 b1       	in	r18, 0x08	; 8
  b2:	26 95       	lsr	r18
  b4:	28 b9       	out	0x08, r18	; 8
  b6:	01 97       	sbiw	r24, 0x01	; 1
	while(1) {
		for (int i = 0; i < 7; ++i) {
			_delay_ms(100);
			PORTC = PORTC << 1;
		}
		for (int i = 0; i < 7; ++i) {
  b8:	00 97       	sbiw	r24, 0x00	; 0
  ba:	a1 f7       	brne	.-24     	; 0xa4 <sweep+0x3a>
  bc:	ec cf       	rjmp	.-40     	; 0x96 <sweep+0x2c>

000000be <main>:
void sweep(void);
void follow_switches(void);

int main (void)
{
	sweep();
  be:	d5 df       	rcall	.-86     	; 0x6a <sweep>

000000c0 <_exit>:
  c0:	f8 94       	cli

000000c2 <__stop_program>:
  c2:	ff cf       	rjmp	.-2      	; 0xc2 <__stop_program>
