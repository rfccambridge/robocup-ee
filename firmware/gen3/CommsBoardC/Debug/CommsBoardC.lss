
CommsBoardC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000432  000004c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000432  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000061  00800102  00800102  000004c8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004c8  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000c8  00000000  00000000  000004f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009db  00000000  00000000  000005c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000004e1  00000000  00000000  00000f9b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004a6  00000000  00000000  0000147c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000220  00000000  00000000  00001924  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003c6  00000000  00000000  00001b44  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000064a  00000000  00000000  00001f0a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c8  00000000  00000000  00002554  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2c 00 	jmp	0x58	; 0x58 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 a0 00 	jmp	0x140	; 0x140 <__vector_13>
  38:	0c 94 0a 01 	jmp	0x214	; 0x214 <__vector_14>
  3c:	0c 94 00 01 	jmp	0x200	; 0x200 <__vector_15>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000058 <__ctors_end>:
  58:	11 24       	eor	r1, r1
  5a:	1f be       	out	0x3f, r1	; 63
  5c:	cf ef       	ldi	r28, 0xFF	; 255
  5e:	d4 e0       	ldi	r29, 0x04	; 4
  60:	de bf       	out	0x3e, r29	; 62
  62:	cd bf       	out	0x3d, r28	; 61

00000064 <__do_copy_data>:
  64:	11 e0       	ldi	r17, 0x01	; 1
  66:	a0 e0       	ldi	r26, 0x00	; 0
  68:	b1 e0       	ldi	r27, 0x01	; 1
  6a:	e2 e3       	ldi	r30, 0x32	; 50
  6c:	f4 e0       	ldi	r31, 0x04	; 4
  6e:	02 c0       	rjmp	.+4      	; 0x74 <__do_copy_data+0x10>
  70:	05 90       	lpm	r0, Z+
  72:	0d 92       	st	X+, r0
  74:	a2 30       	cpi	r26, 0x02	; 2
  76:	b1 07       	cpc	r27, r17
  78:	d9 f7       	brne	.-10     	; 0x70 <__do_copy_data+0xc>

0000007a <__do_clear_bss>:
  7a:	21 e0       	ldi	r18, 0x01	; 1
  7c:	a2 e0       	ldi	r26, 0x02	; 2
  7e:	b1 e0       	ldi	r27, 0x01	; 1
  80:	01 c0       	rjmp	.+2      	; 0x84 <.do_clear_bss_start>

00000082 <.do_clear_bss_loop>:
  82:	1d 92       	st	X+, r1

00000084 <.do_clear_bss_start>:
  84:	a3 36       	cpi	r26, 0x63	; 99
  86:	b2 07       	cpc	r27, r18
  88:	e1 f7       	brne	.-8      	; 0x82 <.do_clear_bss_loop>
  8a:	0e 94 4b 00 	call	0x96	; 0x96 <main>
  8e:	0c 94 17 02 	jmp	0x42e	; 0x42e <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <main>:
#define FOSC 1843200
#define BAUD 9600
#define MYUBRR FOSC/16/BAUD-1

int main(void)
{
  96:	cf 93       	push	r28
  98:	df 93       	push	r29
  9a:	00 d0       	rcall	.+0      	; 0x9c <main+0x6>
  9c:	00 d0       	rcall	.+0      	; 0x9e <main+0x8>
  9e:	cd b7       	in	r28, 0x3d	; 61
  a0:	de b7       	in	r29, 0x3e	; 62
	/* Initialize serial, move this to serial lib */
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
  a2:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
  a4:	f8 94       	cli
		unsigned int ubrr = MYUBRR;
		UBRR0H = (unsigned char)(ubrr>>8);
  a6:	10 92 c5 00 	sts	0x00C5, r1
		UBRR0L = (unsigned char)ubrr;
  aa:	9b e0       	ldi	r25, 0x0B	; 11
  ac:	90 93 c4 00 	sts	0x00C4, r25
		UCSR0B = (1 << RXEN0) | (1 << TXEN0);
  b0:	e1 ec       	ldi	r30, 0xC1	; 193
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	98 e1       	ldi	r25, 0x18	; 24
  b6:	90 83       	st	Z, r25
		UCSR0C = (1 << USBS0) | (3<< UCSZ00);
  b8:	9e e0       	ldi	r25, 0x0E	; 14
  ba:	90 93 c2 00 	sts	0x00C2, r25
		UCSR0B |= (1 << UDRIE0);
  be:	90 81       	ld	r25, Z
  c0:	90 62       	ori	r25, 0x20	; 32
  c2:	90 83       	st	Z, r25
		UCSR0B |= (1 << TXCIE0);
  c4:	90 81       	ld	r25, Z
  c6:	90 64       	ori	r25, 0x40	; 64
  c8:	90 83       	st	Z, r25
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
  ca:	8f bf       	out	0x3f, r24	; 63
	}
	
	DDRA = 0xFF;
  cc:	8f ef       	ldi	r24, 0xFF	; 255
  ce:	81 b9       	out	0x01, r24	; 1
	PORTA = 0xFF;
  d0:	82 b9       	out	0x02, r24	; 2
	message recvMsg;
	unsigned char last = 0;
  d2:	c1 2c       	mov	r12, r1
    while(true)
    {
		PORTA = 0xFF;
  d4:	dd 24       	eor	r13, r13
  d6:	da 94       	dec	r13
		// Figure out how many message we might want to fetch
		// This way, even if new message come as we're looping
		// The loop will still end
		int inboxSize = serialGetInboxSize();
		for(int i = 0; i < inboxSize; i++){
  d8:	a1 2c       	mov	r10, r1
  da:	b1 2c       	mov	r11, r1
	PORTA = 0xFF;
	message recvMsg;
	unsigned char last = 0;
    while(true)
    {
		PORTA = 0xFF;
  dc:	d2 b8       	out	0x02, r13	; 2
		// Figure out how many message we might want to fetch
		// This way, even if new message come as we're looping
		// The loop will still end
		int inboxSize = serialGetInboxSize();
  de:	0e 94 96 00 	call	0x12c	; 0x12c <serialGetInboxSize>
  e2:	7c 01       	movw	r14, r24
		for(int i = 0; i < inboxSize; i++){
  e4:	18 16       	cp	r1, r24
  e6:	19 06       	cpc	r1, r25
  e8:	9c f4       	brge	.+38     	; 0x110 <main+0x7a>
  ea:	0a 2d       	mov	r16, r10
  ec:	1b 2d       	mov	r17, r11
			// Empty out the inbox.
			if(!serialPopInbox(&recvMsg)){
  ee:	ce 01       	movw	r24, r28
  f0:	01 96       	adiw	r24, 0x01	; 1
  f2:	0e 94 91 00 	call	0x122	; 0x122 <serialPopInbox>
  f6:	88 23       	and	r24, r24
  f8:	59 f0       	breq	.+22     	; 0x110 <main+0x7a>
				// Failed to get a message for some reason
				// Break out.
				break;
			}
			// Process the message
			if(recvMsg.message[0])
  fa:	8a 81       	ldd	r24, Y+2	; 0x02
  fc:	88 23       	and	r24, r24
  fe:	11 f0       	breq	.+4      	; 0x104 <main+0x6e>
			{
				// Turn on the LED
				PORTA = 0xFF;
 100:	d2 b8       	out	0x02, r13	; 2
 102:	01 c0       	rjmp	.+2      	; 0x106 <main+0x70>
			}
			else
			{
				// Turn off the LED
				PORTA = 0xFF;
 104:	d2 b8       	out	0x02, r13	; 2
		PORTA = 0xFF;
		// Figure out how many message we might want to fetch
		// This way, even if new message come as we're looping
		// The loop will still end
		int inboxSize = serialGetInboxSize();
		for(int i = 0; i < inboxSize; i++){
 106:	0f 5f       	subi	r16, 0xFF	; 255
 108:	1f 4f       	sbci	r17, 0xFF	; 255
 10a:	0e 15       	cp	r16, r14
 10c:	1f 05       	cpc	r17, r15
 10e:	79 f7       	brne	.-34     	; 0xee <main+0x58>
			{
				// Turn off the LED
				PORTA = 0xFF;
			}
		}
		recvMsg.slaveID = 0;
 110:	19 82       	std	Y+1, r1	; 0x01
		recvMsg.message[0] = last++;
 112:	ca 82       	std	Y+2, r12	; 0x02
 114:	c3 94       	inc	r12
    }
 116:	e2 cf       	rjmp	.-60     	; 0xdc <main+0x46>

00000118 <serialPushInbox>:

unsigned int charsSent = SEND_QUEUE_SIZE;
char sendQueue[SEND_QUEUE_SIZE];

bool serialPushInbox(const message* msg){
	return mqPushMessage(msg, &inbox);
 118:	63 e3       	ldi	r22, 0x33	; 51
 11a:	71 e0       	ldi	r23, 0x01	; 1
 11c:	0e 94 b5 01 	call	0x36a	; 0x36a <mqPushMessage>
}
 120:	08 95       	ret

00000122 <serialPopInbox>:

bool serialPopInbox(message* dest){
	return mqPopMessage(dest, &inbox);
 122:	63 e3       	ldi	r22, 0x33	; 51
 124:	71 e0       	ldi	r23, 0x01	; 1
 126:	0e 94 6f 01 	call	0x2de	; 0x2de <mqPopMessage>
}
 12a:	08 95       	ret

0000012c <serialGetInboxSize>:

int serialGetInboxSize(){
	return mqGetSize(&inbox);
 12c:	83 e3       	ldi	r24, 0x33	; 51
 12e:	91 e0       	ldi	r25, 0x01	; 1
 130:	0e 94 04 02 	call	0x408	; 0x408 <mqGetSize>
}
 134:	08 95       	ret

00000136 <serialPopOutbox>:
	// Will just disable itself.
	UCSR0B |= (1 << UDRIE0);
}

bool serialPopOutbox(message* msg){
	return mqPopMessage(msg, &outbox);
 136:	67 e0       	ldi	r22, 0x07	; 7
 138:	71 e0       	ldi	r23, 0x01	; 1
 13a:	0e 94 6f 01 	call	0x2de	; 0x2de <mqPopMessage>
}
 13e:	08 95       	ret

00000140 <__vector_13>:
 *     to clear the TXC0 flag ourselves.
 * RX Complete - Fired when data is ready to be read from the
 *     receive register. The data MUST be read to clear the flag.
 */

ISR(USART0_RX_vect){
 140:	1f 92       	push	r1
 142:	0f 92       	push	r0
 144:	0f b6       	in	r0, 0x3f	; 63
 146:	0f 92       	push	r0
 148:	11 24       	eor	r1, r1
 14a:	2f 93       	push	r18
 14c:	3f 93       	push	r19
 14e:	4f 93       	push	r20
 150:	5f 93       	push	r21
 152:	6f 93       	push	r22
 154:	7f 93       	push	r23
 156:	8f 93       	push	r24
 158:	9f 93       	push	r25
 15a:	af 93       	push	r26
 15c:	bf 93       	push	r27
 15e:	cf 93       	push	r28
 160:	ef 93       	push	r30
 162:	ff 93       	push	r31
	DDRA = 0xFF;
 164:	8f ef       	ldi	r24, 0xFF	; 255
 166:	81 b9       	out	0x01, r24	; 1
	PORTA ^= (0b00000001);
 168:	92 b1       	in	r25, 0x02	; 2
 16a:	81 e0       	ldi	r24, 0x01	; 1
 16c:	89 27       	eor	r24, r25
 16e:	82 b9       	out	0x02, r24	; 2
	char data = UDR0;
 170:	c0 91 c6 00 	lds	r28, 0x00C6
	if (charsRead > 0){
 174:	40 91 02 01 	lds	r20, 0x0102
 178:	50 91 03 01 	lds	r21, 0x0103
 17c:	41 15       	cp	r20, r1
 17e:	51 05       	cpc	r21, r1
 180:	e1 f0       	breq	.+56     	; 0x1ba <__vector_13+0x7a>
		// Data is part of the message body
		readBuf.message[charsRead % SERIAL_MSG_CHARS] = data;
 182:	9a 01       	movw	r18, r20
 184:	ab ea       	ldi	r26, 0xAB	; 171
 186:	ba ea       	ldi	r27, 0xAA	; 170
 188:	0e 94 08 02 	call	0x410	; 0x410 <__umulhisi3>
 18c:	96 95       	lsr	r25
 18e:	87 95       	ror	r24
 190:	9c 01       	movw	r18, r24
 192:	22 0f       	add	r18, r18
 194:	33 1f       	adc	r19, r19
 196:	82 0f       	add	r24, r18
 198:	93 1f       	adc	r25, r19
 19a:	fa 01       	movw	r30, r20
 19c:	e8 1b       	sub	r30, r24
 19e:	f9 0b       	sbc	r31, r25
 1a0:	e0 5a       	subi	r30, 0xA0	; 160
 1a2:	fe 4f       	sbci	r31, 0xFE	; 254
 1a4:	c0 83       	st	Z, r28
	}
	else{
		// Data is the slave ID
		readBuf.slaveID = data;
	}
	if(++charsRead > 1 + SERIAL_MSG_CHARS){
 1a6:	4f 5f       	subi	r20, 0xFF	; 255
 1a8:	5f 4f       	sbci	r21, 0xFF	; 255
 1aa:	50 93 03 01 	sts	0x0103, r21
 1ae:	40 93 02 01 	sts	0x0102, r20
 1b2:	45 30       	cpi	r20, 0x05	; 5
 1b4:	51 05       	cpc	r21, r1
 1b6:	50 f4       	brcc	.+20     	; 0x1cc <__vector_13+0x8c>
 1b8:	11 c0       	rjmp	.+34     	; 0x1dc <__vector_13+0x9c>
		// Data is part of the message body
		readBuf.message[charsRead % SERIAL_MSG_CHARS] = data;
	}
	else{
		// Data is the slave ID
		readBuf.slaveID = data;
 1ba:	c0 93 5f 01 	sts	0x015F, r28
	}
	if(++charsRead > 1 + SERIAL_MSG_CHARS){
 1be:	81 e0       	ldi	r24, 0x01	; 1
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	90 93 03 01 	sts	0x0103, r25
 1c6:	80 93 02 01 	sts	0x0102, r24
 1ca:	08 c0       	rjmp	.+16     	; 0x1dc <__vector_13+0x9c>
		// Have read a full message
		serialPushInbox(&readBuf);
 1cc:	8f e5       	ldi	r24, 0x5F	; 95
 1ce:	91 e0       	ldi	r25, 0x01	; 1
 1d0:	0e 94 8c 00 	call	0x118	; 0x118 <serialPushInbox>
		charsRead = 0;
 1d4:	10 92 03 01 	sts	0x0103, r1
 1d8:	10 92 02 01 	sts	0x0102, r1
	}
};
 1dc:	ff 91       	pop	r31
 1de:	ef 91       	pop	r30
 1e0:	cf 91       	pop	r28
 1e2:	bf 91       	pop	r27
 1e4:	af 91       	pop	r26
 1e6:	9f 91       	pop	r25
 1e8:	8f 91       	pop	r24
 1ea:	7f 91       	pop	r23
 1ec:	6f 91       	pop	r22
 1ee:	5f 91       	pop	r21
 1f0:	4f 91       	pop	r20
 1f2:	3f 91       	pop	r19
 1f4:	2f 91       	pop	r18
 1f6:	0f 90       	pop	r0
 1f8:	0f be       	out	0x3f, r0	; 63
 1fa:	0f 90       	pop	r0
 1fc:	1f 90       	pop	r1
 1fe:	18 95       	reti

00000200 <__vector_15>:

ISR(USART0_TX_vect){
 200:	1f 92       	push	r1
 202:	0f 92       	push	r0
 204:	0f b6       	in	r0, 0x3f	; 63
 206:	0f 92       	push	r0
 208:	11 24       	eor	r1, r1
	// Do nothing, this just clears the tx complete flag for us
};
 20a:	0f 90       	pop	r0
 20c:	0f be       	out	0x3f, r0	; 63
 20e:	0f 90       	pop	r0
 210:	1f 90       	pop	r1
 212:	18 95       	reti

00000214 <__vector_14>:

ISR(USART0_UDRE_vect){
 214:	1f 92       	push	r1
 216:	0f 92       	push	r0
 218:	0f b6       	in	r0, 0x3f	; 63
 21a:	0f 92       	push	r0
 21c:	11 24       	eor	r1, r1
 21e:	2f 93       	push	r18
 220:	3f 93       	push	r19
 222:	4f 93       	push	r20
 224:	5f 93       	push	r21
 226:	6f 93       	push	r22
 228:	7f 93       	push	r23
 22a:	8f 93       	push	r24
 22c:	9f 93       	push	r25
 22e:	af 93       	push	r26
 230:	bf 93       	push	r27
 232:	ef 93       	push	r30
 234:	ff 93       	push	r31
 236:	cf 93       	push	r28
 238:	df 93       	push	r29
 23a:	00 d0       	rcall	.+0      	; 0x23c <__vector_14+0x28>
 23c:	00 d0       	rcall	.+0      	; 0x23e <__vector_14+0x2a>
 23e:	cd b7       	in	r28, 0x3d	; 61
 240:	de b7       	in	r29, 0x3e	; 62
	DDRA = 0xFF;
 242:	8f ef       	ldi	r24, 0xFF	; 255
 244:	81 b9       	out	0x01, r24	; 1
	PORTA ^= 0b00000010;
 246:	92 b1       	in	r25, 0x02	; 2
 248:	82 e0       	ldi	r24, 0x02	; 2
 24a:	89 27       	eor	r24, r25
 24c:	82 b9       	out	0x02, r24	; 2
	if(charsSent >= SEND_QUEUE_SIZE){
 24e:	80 91 00 01 	lds	r24, 0x0100
 252:	90 91 01 01 	lds	r25, 0x0101
 256:	03 97       	sbiw	r24, 0x03	; 3
 258:	d0 f0       	brcs	.+52     	; 0x28e <__vector_14+0x7a>
		// We have nothing to send, check the outbox.
		message msg;
		if(serialPopOutbox(&msg)){
 25a:	ce 01       	movw	r24, r28
 25c:	01 96       	adiw	r24, 0x01	; 1
 25e:	0e 94 9b 00 	call	0x136	; 0x136 <serialPopOutbox>
 262:	88 23       	and	r24, r24
 264:	71 f0       	breq	.+28     	; 0x282 <__vector_14+0x6e>
			// There *is* a message waiting to send
			// We'll queue it up for sending
			memcpy(&sendQueue, &(msg.message), sizeof(char) * SERIAL_MSG_CHARS);
 266:	8a 81       	ldd	r24, Y+2	; 0x02
 268:	9b 81       	ldd	r25, Y+3	; 0x03
 26a:	ac 81       	ldd	r26, Y+4	; 0x04
 26c:	80 93 04 01 	sts	0x0104, r24
 270:	90 93 05 01 	sts	0x0105, r25
 274:	a0 93 06 01 	sts	0x0106, r26
			charsSent = 0;
 278:	10 92 01 01 	sts	0x0101, r1
 27c:	10 92 00 01 	sts	0x0100, r1
 280:	06 c0       	rjmp	.+12     	; 0x28e <__vector_14+0x7a>
		}
		else{
			// No message waiting, we have nothing to do.
			// Disable the send empty interrupt to avoid looping.
			UCSR0B &= ~(1 << UDRIE0);
 282:	e1 ec       	ldi	r30, 0xC1	; 193
 284:	f0 e0       	ldi	r31, 0x00	; 0
 286:	80 81       	ld	r24, Z
 288:	8f 7d       	andi	r24, 0xDF	; 223
 28a:	80 83       	st	Z, r24
 28c:	11 c0       	rjmp	.+34     	; 0x2b0 <__vector_14+0x9c>
			return;
		}
	}
	UDR0 = sendQueue[charsSent++];
 28e:	80 91 00 01 	lds	r24, 0x0100
 292:	90 91 01 01 	lds	r25, 0x0101
 296:	9c 01       	movw	r18, r24
 298:	2f 5f       	subi	r18, 0xFF	; 255
 29a:	3f 4f       	sbci	r19, 0xFF	; 255
 29c:	30 93 01 01 	sts	0x0101, r19
 2a0:	20 93 00 01 	sts	0x0100, r18
 2a4:	fc 01       	movw	r30, r24
 2a6:	ec 5f       	subi	r30, 0xFC	; 252
 2a8:	fe 4f       	sbci	r31, 0xFE	; 254
 2aa:	80 81       	ld	r24, Z
 2ac:	80 93 c6 00 	sts	0x00C6, r24
 2b0:	0f 90       	pop	r0
 2b2:	0f 90       	pop	r0
 2b4:	0f 90       	pop	r0
 2b6:	0f 90       	pop	r0
 2b8:	df 91       	pop	r29
 2ba:	cf 91       	pop	r28
 2bc:	ff 91       	pop	r31
 2be:	ef 91       	pop	r30
 2c0:	bf 91       	pop	r27
 2c2:	af 91       	pop	r26
 2c4:	9f 91       	pop	r25
 2c6:	8f 91       	pop	r24
 2c8:	7f 91       	pop	r23
 2ca:	6f 91       	pop	r22
 2cc:	5f 91       	pop	r21
 2ce:	4f 91       	pop	r20
 2d0:	3f 91       	pop	r19
 2d2:	2f 91       	pop	r18
 2d4:	0f 90       	pop	r0
 2d6:	0f be       	out	0x3f, r0	; 63
 2d8:	0f 90       	pop	r0
 2da:	1f 90       	pop	r1
 2dc:	18 95       	reti

000002de <mqPopMessage>:
#include <util/atomic.h>
#include <string.h>
#include "commcore.h"

bool mqPopMessage(message* dest, messageQueue* mq){
 2de:	cf 93       	push	r28
 2e0:	fb 01       	movw	r30, r22
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
 2e2:	cf b7       	in	r28, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 2e4:	f8 94       	cli
		if(mq->size <= 0){
 2e6:	20 81       	ld	r18, Z
 2e8:	31 81       	ldd	r19, Z+1	; 0x01
 2ea:	23 2b       	or	r18, r19
 2ec:	19 f4       	brne	.+6      	; 0x2f4 <mqPopMessage+0x16>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 2ee:	cf bf       	out	0x3f, r28	; 63
			return false;
 2f0:	80 e0       	ldi	r24, 0x00	; 0
 2f2:	39 c0       	rjmp	.+114    	; 0x366 <mqPopMessage+0x88>
		}
		memcpy(dest, &mq[mq->first], sizeof(message));
 2f4:	22 81       	ldd	r18, Z+2	; 0x02
 2f6:	33 81       	ldd	r19, Z+3	; 0x03
 2f8:	4c e2       	ldi	r20, 0x2C	; 44
 2fa:	42 9f       	mul	r20, r18
 2fc:	d0 01       	movw	r26, r0
 2fe:	43 9f       	mul	r20, r19
 300:	b0 0d       	add	r27, r0
 302:	11 24       	eor	r1, r1
 304:	a6 0f       	add	r26, r22
 306:	b7 1f       	adc	r27, r23
 308:	4d 91       	ld	r20, X+
 30a:	5d 91       	ld	r21, X+
 30c:	6d 91       	ld	r22, X+
 30e:	7c 91       	ld	r23, X
 310:	dc 01       	movw	r26, r24
 312:	4d 93       	st	X+, r20
 314:	5d 93       	st	X+, r21
 316:	6d 93       	st	X+, r22
 318:	7c 93       	st	X, r23
 31a:	13 97       	sbiw	r26, 0x03	; 3
		mq->first = (mq->first + 1) % BOX_SIZE;
 31c:	42 81       	ldd	r20, Z+2	; 0x02
 31e:	53 81       	ldd	r21, Z+3	; 0x03
 320:	4f 5f       	subi	r20, 0xFF	; 255
 322:	5f 4f       	sbci	r21, 0xFF	; 255
 324:	9a 01       	movw	r18, r20
 326:	ad ec       	ldi	r26, 0xCD	; 205
 328:	bc ec       	ldi	r27, 0xCC	; 204
 32a:	0e 94 08 02 	call	0x410	; 0x410 <__umulhisi3>
 32e:	96 95       	lsr	r25
 330:	87 95       	ror	r24
 332:	96 95       	lsr	r25
 334:	87 95       	ror	r24
 336:	96 95       	lsr	r25
 338:	87 95       	ror	r24
 33a:	9c 01       	movw	r18, r24
 33c:	22 0f       	add	r18, r18
 33e:	33 1f       	adc	r19, r19
 340:	88 0f       	add	r24, r24
 342:	99 1f       	adc	r25, r25
 344:	88 0f       	add	r24, r24
 346:	99 1f       	adc	r25, r25
 348:	88 0f       	add	r24, r24
 34a:	99 1f       	adc	r25, r25
 34c:	82 0f       	add	r24, r18
 34e:	93 1f       	adc	r25, r19
 350:	48 1b       	sub	r20, r24
 352:	59 0b       	sbc	r21, r25
 354:	53 83       	std	Z+3, r21	; 0x03
 356:	42 83       	std	Z+2, r20	; 0x02
		(mq->size)--;
 358:	80 81       	ld	r24, Z
 35a:	91 81       	ldd	r25, Z+1	; 0x01
 35c:	01 97       	sbiw	r24, 0x01	; 1
 35e:	91 83       	std	Z+1, r25	; 0x01
 360:	80 83       	st	Z, r24
 362:	cf bf       	out	0x3f, r28	; 63
	}
	return true;
 364:	81 e0       	ldi	r24, 0x01	; 1
}
 366:	cf 91       	pop	r28
 368:	08 95       	ret

0000036a <mqPushMessage>:

bool mqPushMessage(const message* msg, messageQueue* mq){
 36a:	ef 92       	push	r14
 36c:	ff 92       	push	r15
 36e:	1f 93       	push	r17
 370:	cf 93       	push	r28
 372:	df 93       	push	r29
 374:	7c 01       	movw	r14, r24
 376:	fb 01       	movw	r30, r22
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
 378:	1f b7       	in	r17, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 37a:	f8 94       	cli
		if(mq->size >= BOX_SIZE){
 37c:	20 81       	ld	r18, Z
 37e:	31 81       	ldd	r19, Z+1	; 0x01
 380:	2a 30       	cpi	r18, 0x0A	; 10
 382:	31 05       	cpc	r19, r1
 384:	18 f0       	brcs	.+6      	; 0x38c <mqPushMessage+0x22>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 386:	1f bf       	out	0x3f, r17	; 63
			return false;
 388:	80 e0       	ldi	r24, 0x00	; 0
 38a:	38 c0       	rjmp	.+112    	; 0x3fc <mqPushMessage+0x92>
		}
		unsigned int idx = (mq->first + mq->size) % BOX_SIZE;
 38c:	42 81       	ldd	r20, Z+2	; 0x02
 38e:	53 81       	ldd	r21, Z+3	; 0x03
 390:	42 0f       	add	r20, r18
 392:	53 1f       	adc	r21, r19
 394:	9a 01       	movw	r18, r20
 396:	ad ec       	ldi	r26, 0xCD	; 205
 398:	bc ec       	ldi	r27, 0xCC	; 204
 39a:	0e 94 08 02 	call	0x410	; 0x410 <__umulhisi3>
 39e:	9c 01       	movw	r18, r24
 3a0:	36 95       	lsr	r19
 3a2:	27 95       	ror	r18
 3a4:	36 95       	lsr	r19
 3a6:	27 95       	ror	r18
 3a8:	36 95       	lsr	r19
 3aa:	27 95       	ror	r18
 3ac:	c9 01       	movw	r24, r18
 3ae:	88 0f       	add	r24, r24
 3b0:	99 1f       	adc	r25, r25
 3b2:	22 0f       	add	r18, r18
 3b4:	33 1f       	adc	r19, r19
 3b6:	22 0f       	add	r18, r18
 3b8:	33 1f       	adc	r19, r19
 3ba:	22 0f       	add	r18, r18
 3bc:	33 1f       	adc	r19, r19
 3be:	28 0f       	add	r18, r24
 3c0:	39 1f       	adc	r19, r25
 3c2:	42 1b       	sub	r20, r18
 3c4:	53 0b       	sbc	r21, r19
		memcpy(&(mq->box[idx]), msg, sizeof(message));
 3c6:	4f 5f       	subi	r20, 0xFF	; 255
 3c8:	5f 4f       	sbci	r21, 0xFF	; 255
 3ca:	ea 01       	movw	r28, r20
 3cc:	cc 0f       	add	r28, r28
 3ce:	dd 1f       	adc	r29, r29
 3d0:	cc 0f       	add	r28, r28
 3d2:	dd 1f       	adc	r29, r29
 3d4:	9e 01       	movw	r18, r28
 3d6:	2e 0f       	add	r18, r30
 3d8:	3f 1f       	adc	r19, r31
 3da:	e7 01       	movw	r28, r14
 3dc:	88 81       	ld	r24, Y
 3de:	99 81       	ldd	r25, Y+1	; 0x01
 3e0:	aa 81       	ldd	r26, Y+2	; 0x02
 3e2:	bb 81       	ldd	r27, Y+3	; 0x03
 3e4:	e9 01       	movw	r28, r18
 3e6:	88 83       	st	Y, r24
 3e8:	99 83       	std	Y+1, r25	; 0x01
 3ea:	aa 83       	std	Y+2, r26	; 0x02
 3ec:	bb 83       	std	Y+3, r27	; 0x03
		(mq->size)++;
 3ee:	80 81       	ld	r24, Z
 3f0:	91 81       	ldd	r25, Z+1	; 0x01
 3f2:	01 96       	adiw	r24, 0x01	; 1
 3f4:	91 83       	std	Z+1, r25	; 0x01
 3f6:	80 83       	st	Z, r24
 3f8:	1f bf       	out	0x3f, r17	; 63
	}
	return true;
 3fa:	81 e0       	ldi	r24, 0x01	; 1
}
 3fc:	df 91       	pop	r29
 3fe:	cf 91       	pop	r28
 400:	1f 91       	pop	r17
 402:	ff 90       	pop	r15
 404:	ef 90       	pop	r14
 406:	08 95       	ret

00000408 <mqGetSize>:

int mqGetSize(const messageQueue* mq){
	return mq->size;
}
 408:	fc 01       	movw	r30, r24
 40a:	80 81       	ld	r24, Z
 40c:	91 81       	ldd	r25, Z+1	; 0x01
 40e:	08 95       	ret

00000410 <__umulhisi3>:
 410:	a2 9f       	mul	r26, r18
 412:	b0 01       	movw	r22, r0
 414:	b3 9f       	mul	r27, r19
 416:	c0 01       	movw	r24, r0
 418:	a3 9f       	mul	r26, r19
 41a:	70 0d       	add	r23, r0
 41c:	81 1d       	adc	r24, r1
 41e:	11 24       	eor	r1, r1
 420:	91 1d       	adc	r25, r1
 422:	b2 9f       	mul	r27, r18
 424:	70 0d       	add	r23, r0
 426:	81 1d       	adc	r24, r1
 428:	11 24       	eor	r1, r1
 42a:	91 1d       	adc	r25, r1
 42c:	08 95       	ret

0000042e <_exit>:
 42e:	f8 94       	cli

00000430 <__stop_program>:
 430:	ff cf       	rjmp	.-2      	; 0x430 <__stop_program>
