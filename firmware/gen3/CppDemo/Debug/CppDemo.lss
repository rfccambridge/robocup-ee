
CppDemo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000d8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  0000012c  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000020  00000000  00000000  0000015c  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000262  00000000  00000000  0000017c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 0000017e  00000000  00000000  000003de  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000011d  00000000  00000000  0000055c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000024  00000000  00000000  0000067c  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000001a1  00000000  00000000  000006a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000012c  00000000  00000000  00000841  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000010  00000000  00000000  0000096d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2c 00 	jmp	0x58	; 0x58 <__ctors_end>
   4:	0c 94 36 00 	jmp	0x6c	; 0x6c <__bad_interrupt>
   8:	0c 94 36 00 	jmp	0x6c	; 0x6c <__bad_interrupt>
   c:	0c 94 36 00 	jmp	0x6c	; 0x6c <__bad_interrupt>
  10:	0c 94 36 00 	jmp	0x6c	; 0x6c <__bad_interrupt>
  14:	0c 94 36 00 	jmp	0x6c	; 0x6c <__bad_interrupt>
  18:	0c 94 36 00 	jmp	0x6c	; 0x6c <__bad_interrupt>
  1c:	0c 94 36 00 	jmp	0x6c	; 0x6c <__bad_interrupt>
  20:	0c 94 36 00 	jmp	0x6c	; 0x6c <__bad_interrupt>
  24:	0c 94 36 00 	jmp	0x6c	; 0x6c <__bad_interrupt>
  28:	0c 94 36 00 	jmp	0x6c	; 0x6c <__bad_interrupt>
  2c:	0c 94 36 00 	jmp	0x6c	; 0x6c <__bad_interrupt>
  30:	0c 94 36 00 	jmp	0x6c	; 0x6c <__bad_interrupt>
  34:	0c 94 36 00 	jmp	0x6c	; 0x6c <__bad_interrupt>
  38:	0c 94 36 00 	jmp	0x6c	; 0x6c <__bad_interrupt>
  3c:	0c 94 36 00 	jmp	0x6c	; 0x6c <__bad_interrupt>
  40:	0c 94 36 00 	jmp	0x6c	; 0x6c <__bad_interrupt>
  44:	0c 94 36 00 	jmp	0x6c	; 0x6c <__bad_interrupt>
  48:	0c 94 36 00 	jmp	0x6c	; 0x6c <__bad_interrupt>
  4c:	0c 94 36 00 	jmp	0x6c	; 0x6c <__bad_interrupt>
  50:	0c 94 36 00 	jmp	0x6c	; 0x6c <__bad_interrupt>
  54:	0c 94 36 00 	jmp	0x6c	; 0x6c <__bad_interrupt>

00000058 <__ctors_end>:
  58:	11 24       	eor	r1, r1
  5a:	1f be       	out	0x3f, r1	; 63
  5c:	cf ef       	ldi	r28, 0xFF	; 255
  5e:	d4 e0       	ldi	r29, 0x04	; 4
  60:	de bf       	out	0x3e, r29	; 62
  62:	cd bf       	out	0x3d, r28	; 61
  64:	0e 94 38 00 	call	0x70	; 0x70 <main>
  68:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <_exit>

0000006c <__bad_interrupt>:
  6c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000070 <main>:

class Sweeper {
	public:
	Sweeper() {
		// change direction of pins with DDRC
		DDRC = 0xFF;
  70:	8f ef       	ldi	r24, 0xFF	; 255
  72:	87 b9       	out	0x07, r24	; 7
		// initialize
		PORTC = 0x01;
  74:	81 e0       	ldi	r24, 0x01	; 1
  76:	88 b9       	out	0x08, r24	; 8
	}
	
	void sweep(int ms) {
		for (int i = 0; i < 7; ++i) {
  78:	80 e0       	ldi	r24, 0x00	; 0
  7a:	90 e0       	ldi	r25, 0x00	; 0
  7c:	57 e0       	ldi	r21, 0x07	; 7
  7e:	40 e0       	ldi	r20, 0x00	; 0
  80:	70 e0       	ldi	r23, 0x00	; 0
  82:	60 e0       	ldi	r22, 0x00	; 0
  84:	10 c0       	rjmp	.+32     	; 0xa6 <main+0x36>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  86:	2f e9       	ldi	r18, 0x9F	; 159
  88:	36 e8       	ldi	r19, 0x86	; 134
  8a:	e1 e0       	ldi	r30, 0x01	; 1
  8c:	21 50       	subi	r18, 0x01	; 1
  8e:	30 40       	sbci	r19, 0x00	; 0
  90:	e0 40       	sbci	r30, 0x00	; 0
  92:	e1 f7       	brne	.-8      	; 0x8c <main+0x1c>
  94:	00 c0       	rjmp	.+0      	; 0x96 <main+0x26>
  96:	00 00       	nop
			_delay_ms(ms);
			PORTC = PORTC << 1;
  98:	28 b1       	in	r18, 0x08	; 8
  9a:	22 0f       	add	r18, r18
  9c:	28 b9       	out	0x08, r18	; 8
		// initialize
		PORTC = 0x01;
	}
	
	void sweep(int ms) {
		for (int i = 0; i < 7; ++i) {
  9e:	01 96       	adiw	r24, 0x01	; 1
  a0:	02 c0       	rjmp	.+4      	; 0xa6 <main+0x36>
  a2:	87 2f       	mov	r24, r23
  a4:	96 2f       	mov	r25, r22
  a6:	87 30       	cpi	r24, 0x07	; 7
  a8:	91 05       	cpc	r25, r1
  aa:	6c f3       	brlt	.-38     	; 0x86 <main+0x16>
  ac:	85 2f       	mov	r24, r21
  ae:	94 2f       	mov	r25, r20
  b0:	2f e9       	ldi	r18, 0x9F	; 159
  b2:	36 e8       	ldi	r19, 0x86	; 134
  b4:	e1 e0       	ldi	r30, 0x01	; 1
  b6:	21 50       	subi	r18, 0x01	; 1
  b8:	30 40       	sbci	r19, 0x00	; 0
  ba:	e0 40       	sbci	r30, 0x00	; 0
  bc:	e1 f7       	brne	.-8      	; 0xb6 <main+0x46>
  be:	00 c0       	rjmp	.+0      	; 0xc0 <main+0x50>
  c0:	00 00       	nop
			_delay_ms(ms);
			PORTC = PORTC << 1;
		}
		for (int i = 0; i < 7; ++i) {
			_delay_ms(ms);
			PORTC = PORTC >> 1;
  c2:	28 b1       	in	r18, 0x08	; 8
  c4:	30 e0       	ldi	r19, 0x00	; 0
  c6:	35 95       	asr	r19
  c8:	27 95       	ror	r18
  ca:	28 b9       	out	0x08, r18	; 8
  cc:	01 97       	sbiw	r24, 0x01	; 1
	void sweep(int ms) {
		for (int i = 0; i < 7; ++i) {
			_delay_ms(ms);
			PORTC = PORTC << 1;
		}
		for (int i = 0; i < 7; ++i) {
  ce:	00 97       	sbiw	r24, 0x00	; 0
  d0:	79 f7       	brne	.-34     	; 0xb0 <main+0x40>
  d2:	e7 cf       	rjmp	.-50     	; 0xa2 <main+0x32>

000000d4 <_exit>:
  d4:	f8 94       	cli

000000d6 <__stop_program>:
  d6:	ff cf       	rjmp	.-2      	; 0xd6 <__stop_program>
